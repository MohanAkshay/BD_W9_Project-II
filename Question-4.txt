// Mapper claass
import java.io.IOException;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Mapper.Context;
public class Mapperclass extends
Mapper<LongWritable, Text, Text, Text> {
public static final int MISSING = 9999;
public void map(LongWritable arg0, Text Value, Context context)
				throws IOException, InterruptedException {

			
			String line = Value.toString();
			
			
            
            
			if (!(line.length() == 0)) {
				
				//date
				
				String date = line.substring(6, 14);
				
				float temp_Max = Float
						.parseFloat(line.substring(39, 45).trim());
				
				
				float temp_Min = Float
						.parseFloat(line.substring(47, 53).trim());

				
				if ( temp_Max != MISSING && temp_Min != MISSING) {
					// Hot day
					context.write(new Text("|Time/Date: " + date+ " | "),
							new Text(String.valueOf(" Maximum Temperature: "+ temp_Max+ "\t|  Minimum Temperature: "+ temp_Min+ "\t|")));
				}

				
				
               
			}
		}
}
	
// Reducer

import java.util.Iterator;

import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import java.io.IOException;


import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;

import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;

import org.apache.hadoop.conf.Configuration;
public class Reducerclass extends
Reducer<Text, Text, Text, Text> {

public void reduce(Text Key, Iterator<Text> Values, Context context)
	throws IOException, InterruptedException {



String temperature = Values.next().toString();
context.write(Key, new Text(temperature));
}

}

// Driver

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class Driverclass  {
	public static void main(String[] args) throws Exception {

		
		Configuration conf = new Configuration();
			
		Job job = new Job(conf, "weather example");
		
		job.setJarByClass(Driverclass.class);

		job.setMapOutputKeyClass(Text.class);
		
		job.setMapOutputValueClass(Text.class);

		job.setMapperClass(Mapperclass.class);
		
		job.setReducerClass(Reducerclass.class);

		job.setInputFormatClass(TextInputFormat.class);
		
		job.setOutputFormatClass(TextOutputFormat.class);

		Path OutputPath = new Path(args[1]);

		FileInputFormat.addInputPath(job, new Path(args[0]));

		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		OutputPath.getFileSystem(conf).delete(OutputPath);

		System.exit(job.waitForCompletion(true) ? 0 : 1);

	}
}